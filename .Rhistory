plot.title = element_text(size = 12, face = "bold"),
axis.title.x = element_text(size = 12, angle=0, vjust = 0.5),
axis.title.y = element_text(size = 12, angle=0, vjust = 0.5),
legend.text = element_text(size = 12),
legend.position = "bottom",
legend.margin=margin(0),
legend.box.margin=margin(-10),
axis.text = element_text(size=10))+
scale_colour_manual(values = c("darkgrey", "black")) +
scale_y_discrete(limits=rev) +
ylab("Year") +
coord_flip() +
guides(shape = guide_legend("model"),
colour = guide_legend("model"))
yearbyyear
# testing difference between 2020 and 2022
Z <- (mod1.yearly$coefficients[[17]] - mod1.yearly$coefficients[[16]])/(sqrt((mod1.yearly$se[[17]])^2 + (mod1.yearly$se[[16]])^2))
pval <- 2*pnorm(-abs(Z))
Eq.coeff <- rbind(Z, pval)
Eq.coeff
#
## Figure 3: demographics ----
## By respondent gender
# generate 2 subsets for men and women Democrats
df_even_w_dem_women <- df_even_w_dem %>%
filter(gender==1)
df_even_w_dem_men <- df_even_w_dem %>%
filter(gender==0)
## bivariate + district-level controls by year
# Women Dems
mod.women.yr <- felm(approval_rep ~ factor(year) + mc_seniority + mc_gender + nonwhite_mc: factor(year)
| dist_party_mc | 0 | state_dist, data=df_even_w_dem_women, weights=df_even_w_dem_women$weight)
# Men Dems
mod.men.yr <- felm(approval_rep ~ factor(year) + mc_seniority + mc_gender + nonwhite_mc: factor(year)
| dist_party_mc | 0 | state_dist, data=df_even_w_dem_men, weights=df_even_w_dem_men$weight)
# generate table of values to plot
mod.women_yr_df <- broom::tidy(mod.women.yr) %>% filter(term%in%c("factor(year)2008:nonwhite_mc",
"factor(year)2010:nonwhite_mc",
"factor(year)2012:nonwhite_mc",
"factor(year)2014:nonwhite_mc",
"factor(year)2016:nonwhite_mc",
"factor(year)2018:nonwhite_mc",
"factor(year)2020:nonwhite_mc",
"factor(year)2022:nonwhite_mc",
"factor(year)2024:nonwhite_mc")) %>%
mutate(model = "Women",
term = case_when(term=="factor(year)2008:nonwhite_mc"~"2008",
term=="factor(year)2010:nonwhite_mc"~"2010",
term=="factor(year)2012:nonwhite_mc"~"2012",
term=="factor(year)2014:nonwhite_mc"~"2014",
term=="factor(year)2016:nonwhite_mc"~"2016",
term=="factor(year)2018:nonwhite_mc"~"2018",
term=="factor(year)2020:nonwhite_mc"~"2020",
term=="factor(year)2022:nonwhite_mc"~"2022",
term=="factor(year)2024:nonwhite_mc"~"2024"))
mod.men_yr_df <- broom::tidy(mod.men.yr) %>% filter(term%in%c("factor(year)2008:nonwhite_mc",
"factor(year)2010:nonwhite_mc",
"factor(year)2012:nonwhite_mc",
"factor(year)2014:nonwhite_mc",
"factor(year)2016:nonwhite_mc",
"factor(year)2018:nonwhite_mc",
"factor(year)2020:nonwhite_mc",
"factor(year)2022:nonwhite_mc",
"factor(year)2024:nonwhite_mc")) %>%
mutate(model = "Men",
term = case_when(term=="factor(year)2008:nonwhite_mc"~"2008",
term=="factor(year)2010:nonwhite_mc"~"2010",
term=="factor(year)2012:nonwhite_mc"~"2012",
term=="factor(year)2014:nonwhite_mc"~"2014",
term=="factor(year)2016:nonwhite_mc"~"2016",
term=="factor(year)2018:nonwhite_mc"~"2018",
term=="factor(year)2020:nonwhite_mc"~"2020",
term=="factor(year)2022:nonwhite_mc"~"2022",
term=="factor(year)2024:nonwhite_mc"~"2024"))
# create tibble with all regression output
models.gender <- rbind(mod.women_yr_df, mod.men_yr_df)
# plot coefficients
year.gender <- dwplot(models.gender,
vline = geom_vline(
xintercept = 0,
colour = "grey60",
linetype = 3
),
dot_args = list(aes(shape = model), size=3),
whisker_args = list(aes(color = model))) +
theme_bw() + ylab("") +
#ggtitle("Marginal Effect of POC MC on MC Approval by Respondent Gender and Year") +
theme(legend.title = element_blank(),
plot.title = element_text(size = 10),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10, angle=0, vjust=.5),
legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(0),
legend.box.margin=margin(-10))+
scale_colour_manual(values = c("darkgrey", "black")) +
scale_y_discrete(limits=rev) +
#xlab("Marginal Effect of \nPOC MC on Approval") +
xlab("") +
ylab("Year") +
ggtitle("By gender") +
coord_flip() +
guides(shape = guide_legend("model"),
colour = guide_legend("model"))
year.gender
# By respondent age cohort (https://www.pewtrusts.org/en/research-and-analysis/data-visualizations/2019/defining-our-six-generations)
fig.age <- df_even_w_dem %>%
mutate(generation = case_when(birthyr < 1928~"Greatest Generation",
birthyr < 1946~"Silent Generation",
birthyr < 1965~"Baby Boomers",
birthyr < 1981~"Generation X",
birthyr < 1997~"Millennials",
birthyr >= 1997~"Generation Z"),
generation = factor(generation,
levels = c("Greatest Generation",
"Silent Generation",
"Baby Boomers",
"Generation X",
"Millennials",
"Generation Z"),
ordered = T)) %>%
filter(!(generation%in%c("Greatest Generation", "Generation Z"))) %>%
group_by(generation) %>%
do(tidy(felm(approval_rep ~ factor(year) + mc_seniority + mc_gender + nonwhite_mc: factor(year)
| dist_party_mc | 0 | state_dist, weights = .$weight, data=.))) %>%
filter(term%in%c("factor(year)2008:nonwhite_mc",
"factor(year)2010:nonwhite_mc",
"factor(year)2012:nonwhite_mc",
"factor(year)2014:nonwhite_mc",
"factor(year)2016:nonwhite_mc",
"factor(year)2018:nonwhite_mc",
"factor(year)2020:nonwhite_mc",
"factor(year)2022:nonwhite_mc",
"factor(year)2024:nonwhite_mc")) %>%
rename(model = generation) %>%
mutate(term = case_when(term=="factor(year)2008:nonwhite_mc"~"2008",
term=="factor(year)2010:nonwhite_mc"~"2010",
term=="factor(year)2012:nonwhite_mc"~"2012",
term=="factor(year)2014:nonwhite_mc"~"2014",
term=="factor(year)2016:nonwhite_mc"~"2016",
term=="factor(year)2018:nonwhite_mc"~"2018",
term=="factor(year)2020:nonwhite_mc"~"2020",
term=="factor(year)2022:nonwhite_mc"~"2022",
term=="factor(year)2024:nonwhite_mc"~"2024"),
upper = estimate + 1.96 * std.error,
lower = estimate - 1.96 * std.error) %>% ggplot(aes(x = term, y = estimate)) +
geom_hline(yintercept = 0, color = "grey60", linetype = 3) +
scale_colour_grey() +
geom_point(aes(shape = model, color = model), size = 3, position = position_dodge(0.5)) +
geom_errorbar(aes(color = model, ymin = lower, ymax = upper), width = 0, position = position_dodge(0.5)) +
theme_bw() +
theme(legend.title = element_blank(),
plot.title = element_text(size = 10),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10, angle=0, vjust=.5),
legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(0),
legend.box.margin=margin(-10))+
#ylab("Marginal Effect of \nPOC MC on Approval") +
ylab("") +
ggtitle("By generation") +
xlab("Year") +
guides(shape = guide_legend("model"),
colour = guide_legend("model"))
fig.age
# by educational attainment
fig.educ <- df_even_w_dem %>%
mutate(educ3 = case_when(educ%in%c(1,2)~"HS or less",
educ%in%c(3,4)~"Some college",
educ%in%c(5,6)~"BA+"),
educ3 = factor(educ3,
levels = c("HS or less",
"Some college",
"BA+"),
ordered = T)) %>%
group_by(educ3) %>%
do(tidy(felm(approval_rep ~ factor(year) + mc_seniority + mc_gender + nonwhite_mc: factor(year)
| dist_party_mc | 0 | state_dist, weights = .$weight, data=.))) %>%
filter(term%in%c("factor(year)2008:nonwhite_mc",
"factor(year)2010:nonwhite_mc",
"factor(year)2012:nonwhite_mc",
"factor(year)2014:nonwhite_mc",
"factor(year)2016:nonwhite_mc",
"factor(year)2018:nonwhite_mc",
"factor(year)2020:nonwhite_mc",
"factor(year)2022:nonwhite_mc",
"factor(year)2024:nonwhite_mc")) %>%
rename(model = educ3) %>%
mutate(term = case_when(term=="factor(year)2008:nonwhite_mc"~"2008",
term=="factor(year)2010:nonwhite_mc"~"2010",
term=="factor(year)2012:nonwhite_mc"~"2012",
term=="factor(year)2014:nonwhite_mc"~"2014",
term=="factor(year)2016:nonwhite_mc"~"2016",
term=="factor(year)2018:nonwhite_mc"~"2018",
term=="factor(year)2020:nonwhite_mc"~"2020",
term=="factor(year)2022:nonwhite_mc"~"2022",
term=="factor(year)2024:nonwhite_mc"~"2024"),
upper = estimate + 1.96 * std.error,
lower = estimate - 1.96 * std.error) %>%
ggplot(aes(x = term, y = estimate)) +
geom_hline(yintercept = 0, color = "grey60", linetype = 3) +
geom_point(aes(shape = model, color = model), size = 3, position = position_dodge(0.5)) +
geom_errorbar(aes(color = model, ymin = lower, ymax = upper), width = 0, position = position_dodge(0.5)) +
theme_bw() +
theme(legend.title = element_blank(),
plot.title = element_text(size = 10),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10, angle=0, vjust=.5),
legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(0),
legend.box.margin=margin(-10))+
scale_colour_grey() +
#ylab("Marginal Effect of \nPOC MC on Approval") +
ylab("") +
ggtitle("By education") +
xlab("Year") +
guides(shape = guide_legend("model"),
colour = guide_legend("model"))
fig.educ
# by above-below median household income
fig.income <- df_even_w_dem %>%
filter(!is.na(faminc)) %>%
group_by(year) %>%
mutate(above_median = case_when(faminc > median(faminc) ~ 1, T~0)) %>%
ungroup() %>%
group_by(above_median) %>%
do(tidy(felm(approval_rep ~ factor(year) + mc_seniority + mc_gender + nonwhite_mc: factor(year)
| dist_party_mc | 0 | state_dist, weights = .$weight, data=.))) %>%
filter(term%in%c("factor(year)2008:nonwhite_mc",
"factor(year)2010:nonwhite_mc",
"factor(year)2012:nonwhite_mc",
"factor(year)2014:nonwhite_mc",
"factor(year)2016:nonwhite_mc",
"factor(year)2018:nonwhite_mc",
"factor(year)2020:nonwhite_mc",
"factor(year)2022:nonwhite_mc",
"factor(year)2024:nonwhite_mc")) %>%
mutate(term = case_when(term=="factor(year)2008:nonwhite_mc"~"2008",
term=="factor(year)2010:nonwhite_mc"~"2010",
term=="factor(year)2012:nonwhite_mc"~"2012",
term=="factor(year)2014:nonwhite_mc"~"2014",
term=="factor(year)2016:nonwhite_mc"~"2016",
term=="factor(year)2018:nonwhite_mc"~"2018",
term=="factor(year)2020:nonwhite_mc"~"2020",
term=="factor(year)2022:nonwhite_mc"~"2022",
term=="factor(year)2024:nonwhite_mc"~"2024"),
upper = estimate + 1.96 * std.error,
lower = estimate - 1.96 * std.error,
model = case_when(above_median==0~"Below median income",
above_median==1~"Above median income")) %>%
ggplot(aes(x = term, y = estimate)) +
geom_hline(yintercept = 0, color = "grey60", linetype = 3) +
geom_point(aes(shape = model, color = model), size = 3, position = position_dodge(0.5)) +
geom_errorbar(aes(color = model, ymin = lower, ymax = upper), width = 0, position = position_dodge(0.5)) +
theme_bw() +
theme(legend.title = element_blank(),
plot.title = element_text(size = 10),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10, angle=0, vjust=.5),
legend.text = element_text(size = 10),
legend.position = "bottom",
legend.margin=margin(0),
legend.box.margin=margin(-10))+
scale_colour_grey() +
#ylab("Marginal Effect of \nPOC MC on Approval") +
ylab("")+
ggtitle("By above/below−median income") +
xlab("Year") +
guides(shape = guide_legend("model"),
colour = guide_legend("model"))
fig.income
# combine plots
combined_plots <- ggarrange(year.gender, fig.age, fig.educ, fig.income)
# add acis
annotate_figure(combined_plots,
left = text_grob("Marginal Effect of \nPOC MC on Approval",
rot = 0,
size = 10))
#
## Figure 4: Knowledge of MC race ----
df_high.knowledge_dem <- df_even_w_dem %>%
filter(race_correct_nw==1)
df_low.knowledge_dem <- df_even_w_dem %>%
filter(race_correct_nw==0)
## Basic approval for white dems over time
# High Knowledge respondents
mod1.hk <- felm(approval_rep ~ factor(year) + mc_seniority + mc_gender + nonwhite_mc: factor(year)
| dist_party_mc | 0 | state_dist, data=df_high.knowledge_dem,weights=df_high.knowledge_dem$weight)
# Low Knowledge respondents
mod1.lk <- felm(approval_rep ~ factor(year) + mc_seniority + mc_gender + nonwhite_mc: factor(year)
| dist_party_mc | 0 | state_dist, data=df_low.knowledge_dem,weights=df_low.knowledge_dem$weight)
# Create data frames with regression output of interest
# High-Knowledge
df_dem.hk <- broom::tidy(mod1.hk) %>% filter(term%in%c("factor(year)2008:nonwhite_mc",
"factor(year)2010:nonwhite_mc",
"factor(year)2012:nonwhite_mc",
"factor(year)2014:nonwhite_mc",
"factor(year)2016:nonwhite_mc",
"factor(year)2018:nonwhite_mc",
"factor(year)2020:nonwhite_mc",
"factor(year)2022:nonwhite_mc",
"factor(year)2024:nonwhite_mc")) %>%
mutate(model = "Democrats",
term = case_when(term=="factor(year)2008:nonwhite_mc"~"2008",
term=="factor(year)2010:nonwhite_mc"~"2010",
term=="factor(year)2012:nonwhite_mc"~"2012",
term=="factor(year)2014:nonwhite_mc"~"2014",
term=="factor(year)2016:nonwhite_mc"~"2016",
term=="factor(year)2018:nonwhite_mc"~"2018",
term=="factor(year)2020:nonwhite_mc"~"2020",
term=="factor(year)2022:nonwhite_mc"~"2022",
term=="factor(year)2024:nonwhite_mc"~"2024"))
# Low-knowledge
df_dem.lk <- broom::tidy(mod1.lk) %>% filter(term%in%c("factor(year)2008:nonwhite_mc",
"factor(year)2010:nonwhite_mc",
"factor(year)2012:nonwhite_mc",
"factor(year)2014:nonwhite_mc",
"factor(year)2016:nonwhite_mc",
"factor(year)2018:nonwhite_mc",
"factor(year)2020:nonwhite_mc",
"factor(year)2022:nonwhite_mc",
"factor(year)2024:nonwhite_mc")) %>%
mutate(model = "Democrats",
term = case_when(term=="factor(year)2008:nonwhite_mc"~"2008",
term=="factor(year)2010:nonwhite_mc"~"2010",
term=="factor(year)2012:nonwhite_mc"~"2012",
term=="factor(year)2014:nonwhite_mc"~"2014",
term=="factor(year)2016:nonwhite_mc"~"2016",
term=="factor(year)2018:nonwhite_mc"~"2018",
term=="factor(year)2020:nonwhite_mc"~"2020",
term=="factor(year)2022:nonwhite_mc"~"2022",
term=="factor(year)2024:nonwhite_mc"~"2024"))
# Need to bind the datasets for face_grid
models.hk.dem <- df_dem.hk %>% mutate(knowledge = "Accurately Identify MC Race")
models.lk.dem <- df_dem.lk %>% mutate(knowledge = "Inaccurately Identify MC Race")
models.knowledge2 <- rbind(models.lk.dem, models.hk.dem)
mycol<-brewer.pal(5,"Greys")[c(2,5)]
models.knowledge2$knowledge <- factor(models.knowledge2$knowledge,
levels = c("Accurately Identify MC Race",
"Inaccurately Identify MC Race"))
knowledge_plot <- dwplot(models.knowledge2,
vline = geom_vline(
xintercept = 0,
colour = "grey60",
linetype = 2
),
dot_args = list(aes(shape = model), size=3),
whisker_args = list(aes(color = model))) +
theme_bw() + ylab("") +
#ggtitle("Marginal Effect of POC MC on Approval by Knowledge Level") +
theme(
legend.title = element_blank(),
plot.title = element_text(size = 12, face = "bold"),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12, angle=0, vjust=.5),
legend.text = element_text(size = 10),
legend.position = "none",
strip.text = element_text(face="bold", size=12)) +
scale_colour_manual(values = c("black")) +
scale_y_discrete(limits=rev) +
xlab("Marginal Effect of\n POC MC on Approval") +
ylab("Year") +
coord_flip() +
facet_grid(scales = "free_y", ~knowledge)+
guides(shape = guide_legend("model"),
colour = guide_legend("model"))
knowledge_plot
#
## Table 1: RR x POC MC, main table ----
# flip index
df_even_w_dem.index <- df_even_w_dem %>%
mutate(rr_index_flip = 1-rr_index)
# interact POC MC*rr with district-level controls for White Dems
mod_rr1_flip <- felm(approval_rep ~ rr_index_flip + rr_index_flip*nonwhite_mc + mc_seniority + mc_gender |
cong + dist_party_mc | 0 | state_dist, data=df_even_w_dem.index, weights=df_even_w_dem.index$weight)
mod_rr3_flip <- felm(approval_rep ~ rr_index_flip + rr_index_flip*black_mc_nw + mc_seniority + mc_gender |
cong + dist_party_mc | 0 | state_dist, data=df_even_w_dem.index, weights=df_even_w_dem.index$weight)
# calculate number of treated districts in each dataset
temp <- df_even_w_dem.index %>%
filter(!is.na(state_dist)&!is.na(approval_rep)&!is.na(nonwhite_mc)&!is.na(mc_seniority)&!is.na(cong)&!is.na(dist_party_mc)&!is.na(mc_gender)&!is.na(rr_index)) %>%
group_by(state_dist, mc_party) %>%
mutate(pct_nonwhite_mc = as.numeric(nonwhite_mc)) %>%
summarise_at(vars(pct_nonwhite_mc), mean, na.rm=T)
treated <- temp %>% filter(pct_nonwhite_mc > 0 & pct_nonwhite_mc < 1)
mod1_n <- nrow(treated)
temp3 <- df_even_w_dem.index %>%
filter(!is.na(state_dist)&!is.na(approval_rep)&!is.na(black_mc_nw)&!is.na(mc_seniority)&!is.na(cong)&!is.na(dist_party_mc)&!is.na(mc_gender)&!is.na(rr_index)) %>%
group_by(state_dist, mc_party) %>%
mutate(pct_black_mc = as.numeric(black_mc_nw)) %>%
summarise_at(vars(pct_black_mc), mean, na.rm=T)
treated3 <- temp3 %>% filter(pct_black_mc > 0 & pct_black_mc < 1)
mod3_n <- nrow(treated3)
# table
stargazer(mod_rr1_flip, mod_rr3_flip,
type="latex",
column.labels=c("POC MC", "Black MC"),
model.numbers=F, style="apsr",
omit = c("mc_seniority", "mc_gender"),
header=F, title = "Effects of POC/Black MC on MC Approval, Interacting MC Race with Racial Resentment (White Respondents)",
order = c("nonwhite_mc", "rr_index_flip:nonwhite_mc", "black_mc_nw", "rr_index_flip:black_mc_nw", "rr_index_flip"),
covariate.labels=c("POC MC", "POC MC x Racial Resentment", "Black MC","Black MC x Resentment","Racial Resentment"),
add.lines = list(c("District * MC Party FEs", "Y", "Y"),
c("Congressional session FEs", "Y", "Y"),
c("No. districts w MC race change", mod1_n, mod3_n)),
dep.var.labels=c("MC approval"), font.size="small",
omit.stat = c("f", "ser", "adj.rsq", "rsq"),
column.sep.width = "-3pt",
star.char = c("+", "*", "**", "***"),
star.cutoffs = c(0.1, .05, .01, .001),
notes.align = "l",
notes = c("+p < 0.1; *p < 0.05; **p < 0.01; ***p < 0.001"), notes.append = F)
#
# Create flipped index
df_even_w_dem.index <- df_even_w_dem %>%
mutate(rr_index_flip = 1 - rr_index)
# Function to create clustered standard errors
cluster_se <- function(model, cluster_var) {
require(sandwich)
require(lmtest)
# Calculate clustered standard errors
clustered.se <- sqrt(diag(vcovCL(model, cluster = cluster_var)))
return(clustered.se)
}
# Run models with fixed effects using lm()
mod_rr1_flip <- lm(approval_rep ~ rr_index_flip + rr_index_flip:nonwhite_mc +
nonwhite_mc + mc_seniority + mc_gender +
factor(cong) + factor(dist_party_mc),
data = df_even_w_dem.index,
weights = weight)
mod_rr3_flip <- lm(approval_rep ~ rr_index_flip + rr_index_flip:black_mc_nw +
black_mc_nw + mc_seniority + mc_gender +
factor(cong) + factor(dist_party_mc),
data = df_even_w_dem.index,
weights = weight)
# Function to generate predictions with confidence intervals
generate_predictions <- function(model, newdata, se_clustered) {
# Get predicted values
pred <- predict(model, newdata = newdata, se.fit = TRUE)
# Calculate confidence intervals
critical_value <- qt(0.975, df = model$df.residual)
# Create prediction dataframe with confidence intervals
pred_df <- data.frame(
fit = pred$fit,
lwr = pred$fit - critical_value * pred$se.fit,
upr = pred$fit + critical_value * pred$se.fit
)
return(pred_df)
}
# Generate sequence of values
set.seed(123)
rr_values <- seq(min(df_even_w_dem.index$rr_index_flip, na.rm = TRUE),
max(df_even_w_dem.index$rr_index_flip, na.rm = TRUE),
length.out = 100)
# Create newdata for predictions
newdata1 <- expand.grid(
rr_index_flip = rr_values,
nonwhite_mc = c(0, 1),
mc_seniority = mean(df_even_w_dem.index$mc_seniority, na.rm = TRUE),
mc_gender = 0
)
# Add dummy variables for fixed effects (using modal values)
modal_congress <- as.numeric(names(sort(table(df_even_w_dem.index$cong), decreasing = TRUE)[1]))
modal_dist_party <- as.numeric(names(sort(table(df_even_w_dem.index$dist_party_mc), decreasing = TRUE)[1]))
newdata1$cong <- modal_congress
newdata1$dist_party_mc <- modal_dist_party
newdata2 <- expand.grid(
rr_index_flip = rr_values,
black_mc_nw = c(0, 1),
mc_seniority = mean(df_even_w_dem.index$mc_seniority, na.rm = TRUE),
mc_gender = 0
)
newdata2$cong <- modal_congress
newdata2$dist_party_mc <- modal_dist_party
# Generate predictions
pred1 <- generate_predictions(mod_rr1_flip, newdata1,
cluster_se(mod_rr1_flip, df_even_w_dem.index$state_dist))
pred2 <- generate_predictions(mod_rr3_flip, newdata2,
cluster_se(mod_rr3_flip, df_even_w_dem.index$state_dist))
# Combine predictions into final dataset
pred_tidy1 <- cbind(newdata1, pred1) %>%
mutate(type = "POC MC") %>%
rename(mc.race = nonwhite_mc)
pred_tidy2 <- cbind(newdata2, pred2) %>%
mutate(type = "Black MC") %>%
rename(mc.race = black_mc_nw)
# Combine all predictions
pred.tidy.all <- bind_rows(pred_tidy1, pred_tidy2)
# relabeling
pred.tidy.all$mc.race <- ifelse(pred.tidy.all$mc.race==1, "POC/Black MC", "White MC")
# Plot predicted values
ggplot(pred.tidy.all, aes(x = rr_index_flip, y = fit,
color = factor(mc.race))) +
geom_line(size = .25) +
geom_ribbon(aes(ymin = lwr, ymax = upr, fill = factor(mc.race)), alpha = 0.3) +
labs(x = "Racial Resentment Index\n(From most to least resentful)",
y = "Marginal effect \non MC Approval") +
theme_bw() +
scale_color_grey() +
scale_fill_grey() +
facet_wrap(~type) +
theme(legend.title = element_blank(),
legend.position = "bottom",
axis.title.y = element_text(angle = 0, vjust = 0.5),
strip.text.x.top = element_text(size = 10, face="bold")) +
scale_x_continuous(
limits = c(0, 1),
breaks = c(0, 1),
labels = c("High", "Low")
) +
ylim(0.25, 1)
