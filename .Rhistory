net.pop.turnover < 0 ~ "Net Decrease",
net.pop.turnover == 0 ~ "Net Same",
TRUE ~ NA_character_),
lag.net.pop.turnover = Total.to.city_lag - Total.from.city_lag,         # negative means more ppl left
lag.move.pop = case_when(lag.net.pop.turnover > 0 ~ "Net Increase",
lag.net.pop.turnover < 0 ~ "Net Decrease",
lag.net.pop.turnover == 0 ~ "Net Same",
TRUE ~ NA_character_),
lag.gain.pop = ifelse(lag.net.pop.turnover > 0, 1, 0)) %>%
mutate(roots.born = case_when(roots==1 ~ "Born in city",
roots==0 ~ "Born elsewhere"))
df.wiki.permit <- df.wiki %>%
left_join(df.permits, by=c("CITY", "State", "YEAR")) %>%
left_join(places_density2, by=c("CITY", "State")) %>%
filter(!is.na(prop_multi_family)) %>%
arrange(State, CITY, YEAR) %>% # order data correctly
group_by(CITY, State) %>% # group by city so lag applies within each city
mutate(Total.to.city_lag = lag(Total.to.city, order_by = YEAR),
Total.from.city_lag = lag(Total.from.city, order_by = YEAR),
POP_lag = lag(POP, order_by = YEAR)) %>%
ungroup() %>%
mutate(pct.of.pop.to.city = Total.to.city/POP,
gain.pop = ifelse(net.pop.turnover > 0, 1, 0), # gain or lose in population in year
move.pop = case_when(net.pop.turnover > 0 ~ "Net Increase",
net.pop.turnover < 0 ~ "Net Decrease",
net.pop.turnover == 0 ~ "Net Same",
TRUE ~ NA_character_),
lag.net.pop.turnover = Total.to.city_lag - Total.from.city_lag,         # negative means more ppl left
lag.move.pop = case_when(lag.net.pop.turnover > 0 ~ "Net Increase",
lag.net.pop.turnover < 0 ~ "Net Decrease",
lag.net.pop.turnover == 0 ~ "Net Same",
TRUE ~ NA_character_),
lag.gain.pop = ifelse(lag.net.pop.turnover > 0, 1, 0)) %>%
mutate(roots.born = case_when(roots==1 ~ "Born in city",
roots==0 ~ "Born elsewhere"))
feols(prop_multi_family ~ roots*log(POP) |
YEAR, data = df.wiki.permit, cluster = ~CITY)
feols(prop_multi_family ~ roots*log(pop_density) |
YEAR, data = df.wiki.permit, cluster = ~CITY)
feols(prop_multi_family ~ log(pop_density) |
YEAR, data = df.wiki.permit, cluster = ~CITY)
feols(prop_multi_family ~ roots*log(pop_density) |
YEAR, data = df.wiki.permit, cluster = ~CITY)
ggplot(df.wiki.permit, aes(y=prop_multi_family, x=log(POP), color=roots.born)) +
geom_point(alpha=.5)+
geom_smooth(method="lm") +
theme_bw() +
scale_color_grey() +
ylab("Proportion of Permits\nfor Multi-Family") +
xlab("Population (logged)")+
theme(legend.title = element_blank(),
legend.position = "bottom",
axis.title.y = element_text(angle=0, vjust=.5))
feols(prop_multi_family ~ roots*log(pop_density) |
YEAR, data = df.wiki.permit, cluster = ~CITY)
ggplot(df.wiki.permit, aes(y=prop_multi_family, x=log(pop_density), color=roots.born)) +
geom_point(alpha=.5)+
geom_smooth(method="lm") +
theme_bw() +
scale_color_grey() +
ylab("Proportion of Permits\nfor Multi-Family") +
xlab("Population (logged)")+
theme(legend.title = element_blank(),
legend.position = "bottom",
axis.title.y = element_text(angle=0, vjust=.5))
df.permits23 <- df.permits %>%
filer(YEAR == 2023)
df.permits23 <- df.permits %>%
filter(YEAR == 2023)
View(df.permits23)
View(df.final.merge2)
df.final.merge.permit <- df.final.merge2 %>%
rename(CITY = City) %>%
left_join(df.permits, by=c("CITY", "State"))
df.final.merge.permit <- df.final.merge2 %>%
rename(CITY = City) %>%
left_join(df.permits23, by=c("CITY", "State"))
View(df.final.merge.permit)
summary(lm(prop_multi_family ~ Q1, data = df.final.merge.permit))
summary(lm(prop_multi_family ~ pct.life.lived, data = df.final.merge.permit))
df.permits23 <- df.permits %>%
filter(YEAR == 2023)
df.final.merge.permit <- df.final.merge2 %>%
rename(CITY = City) %>%
left_join(df.permits23, by=c("CITY", "State"))
View(df.permits)
View(df.permits23)
df.final.merge.permit <- df.final.merge2 %>%
rename(CITY = City) %>%
left_join(df.permits23, by=c("CITY", "State")) %>%
filter(!is.na(TOTAL_BLDGS))
summary(lm(prop_multi_family ~ pct.life.lived, data = df.final.merge.permit))
ggplot(df.final.merge.permit, aes(x=pct.life.lived, y=prop_multi_family)) +
geom_point()
ggplot(df.final.merge.permit, aes(x=pct.life.lived, y=prop_multi_family)) +
geom_point(alpha=.25) +
geom_smooth(method="lm")
df.final.merge.permit <- df.final.merge2 %>%
rename(CITY = City) %>%
left_join(df.permits23, by=c("CITY", "State")) %>%
filter(!is.na(TOTAL_BLDGS)) %>%
# filtering out 0 prop now
filter(!(prop_multi_family==0))
summary(lm(prop_multi_family ~ pct.life.lived, data = df.final.merge.permit))
ggplot(df.final.merge.permit, aes(x=pct.life.lived, y=prop_multi_family)) +
geom_point(alpha=.25) +
geom_smooth(method="lm")
df.final.merge.permit <- df.final.merge2 %>%
rename(CITY = City) %>%
left_join(df.permits23, by=c("CITY", "State")) %>%
filter(!is.na(TOTAL_BLDGS)) #%>%
ggplot(df.final.merge.permit, aes(x=pct.life.lived, y=prop_multi_family)) +
geom_point(alpha=.25) +
geom_smooth(method="lm")
ggplot(df.final.merge.permit, aes(x=pct.life.lived, y=prop_multi_family)) +
geom_point(alpha=.25) +
geom_smooth(method="lm") +
facet_wrap(~pop.bucket)
df.final.merge.permit <- df.final.merge2 %>%
rename(CITY = City) %>%
left_join(df.permits23, by=c("CITY", "State")) %>%
filter(!is.na(TOTAL_BLDGS)) %>%
# filtering out 0 prop now
filter(!(prop_multi_family==0))
summary(lm(prop_multi_family ~ pct.life.lived, data = df.final.merge.permit))
ggplot(df.final.merge.permit, aes(x=pct.life.lived, y=prop_multi_family)) +
geom_point(alpha=.25) +
geom_smooth(method="lm") +
facet_wrap(~pop.bucket)
ggplot(df.final.merge.permit, aes(x=pct.life.lived, y=prop_multi_family)) +
geom_point(alpha=.25) +
geom_smooth(method="lm") +
facet_wrap(~RUCA1)
ggplot(df.final.merge.permit, aes(x=pct.life.lived, y=prop_multi_family)) +
geom_point(alpha=.25) +
geom_smooth(method="lm") +
facet_wrap(~RUCA1.x)
ggplot(df.final.merge.permit, aes(x=pct.life.lived, y=prop_multi_family)) +
geom_point(alpha=.25) +
geom_smooth(method="lm") +
facet_wrap(~pop.bucket)
summary(lm(prop_multi_family ~ pct.life.lived + log(population), data = df.final.merge.permit))
summary(lm(prop_multi_family ~ pct.life.lived + log(Population), data = df.final.merge.permit))
summary(lm(prop_multi_family ~ pct.life.lived + log(Population) + rurality.scale, data = df.final.merge.permit))
summary(lm(prop_multi_family ~ pct.life.lived + log(Population) + rural.scale, data = df.final.merge.permit))
# Now, merge churn to df.finalmerge
df.final.merge2 <- df.final.merge %>%
left_join(df.churn, by = c("Zip.Code", "City")) %>%
# generate variable for net migration
mutate(net.pop.turnover = Total.to.zip - Total.from.zip)%>% # negative means more ppl left
mutate(issue_zoning = case_when(Q15_1 != "" ~ 1,
TRUE ~ 0),
issue_permits = case_when(Q15_2 != "" ~ 1,
TRUE ~ 0),
issue_affordable.housing = case_when(Q15_3 != "" ~ 1,
TRUE ~ 0),
issue_other.development = case_when(Q15_4 != "" ~ 1,
TRUE ~ 0),
issue_infrastructure = case_when(Q15_5 != "" ~ 1,
TRUE ~ 0),
issue_libraries = case_when(Q15_6 != "" ~ 1,
TRUE ~ 0),
issue_water = case_when(Q15_7 != "" ~ 1,
TRUE ~ 0),
issue_education = case_when(Q15_8 != "" ~ 1,
TRUE ~ 0),
issue_identity = case_when(Q15_9 != "" ~ 1,
TRUE ~ 0),
issue_elderly = case_when(Q15_10 != "" ~ 1,
TRUE ~ 0),
issue_homeless = case_when(Q15_11 != "" ~ 1,
TRUE ~ 0),
issue_fire = case_when(Q15_12 != "" ~ 1,
TRUE ~ 0),
issue_pub.safety = case_when(Q15_13 != "" ~ 1,
TRUE ~ 0),
issue_transportation = case_when(Q15_14 != "" ~ 1,
TRUE ~ 0),
issue_health = case_when(Q15_15 != "" ~ 1,
TRUE ~ 0),
issue_business = case_when(Q15_16 != "" ~ 1,
TRUE ~ 0),
issue_community = case_when(Q15_17 != "" ~ 1,
TRUE ~ 0),
issue_guns = case_when(Q15_18 != "" ~ 1,
TRUE ~ 0),
issue_budget = case_when(Q15_19 != "" ~ 1,
TRUE ~ 0),
issue_biking = case_when(Q15_20 != "" ~ 1,
TRUE ~ 0),
issue_parks = case_when(Q15_21 != "" ~ 1,
TRUE ~ 0),
issue_natural.disaster = case_when(Q15_22 != "" ~ 1,
TRUE ~ 0),
issue_environment = case_when(Q15_23 != "" ~ 1,
TRUE ~ 0),
issue_publicland = case_when(Q15_24 != "" ~ 1,
TRUE ~ 0))
df.permits23 <- df.permits %>%
filter(YEAR == 2023)
df.final.merge.permit <- df.final.merge2 %>%
rename(CITY = City) %>%
left_join(df.permits23, by=c("CITY", "State")) %>%
filter(!is.na(TOTAL_BLDGS)) %>%
# filtering out 0 prop now
filter(!(prop_multi_family==0))
# relationship with being prioritizing housing?
summary(lm(prop_multi_family ~ issue_permits + log(Population) + rural.scale, data = df.final.merge.permit))
summary(lm(prop_multi_family ~ issue_affordablehousing + log(Population) + rural.scale, data = df.final.merge.permit))
summary(lm(prop_multi_family ~ issue_affordable_housing + log(Population) + rural.scale, data = df.final.merge.permit))
summary(lm(prop_multi_family ~ issue_affordable.housing + log(Population) + rural.scale, data = df.final.merge.permit))
# relationship with being prioritizing housing?
summary(lm(prop_multi_family ~ issue_permits , data = df.final.merge.permit))
summary(lm(prop_multi_family ~ issue_affordable.housing , data = df.final.merge.permit))
summary(lm(prop_multi_family ~ issue_zoning , data = df.final.merge.permit))
summary(lm(prop_multi_family ~ issue_development, data = df.final.merge.permit))
summary(lm(prop_multi_family ~ issue_other.development, data = df.final.merge.permit))
summary(lm(prop_multi_family ~ issue_other.development + log(Population), data = df.final.merge.permit)) # this
summary(lm(prop_multi_family ~ issue_other.development + log(Population) + rural.scale, data = df.final.merge.permit)) # this but not once control for pop
summary(lm(prop_multi_family ~ issue_other.development + log(Population), data = df.final.merge.permit)) # this but not once control for pop
summary(lm(prop_multi_family ~ issue_other.development , data = df.final.merge.permit)) # this but not once control for pop
df.l2.2018.mayor <- read.csv("./Local connection/L2/Data for paper/mayors.ornstein.2018.fullmatch.030225.clean.csv") %>%
mutate(YEAR = 2018)
df.l2.2020.mayor <- read.csv("./Local connection/L2/Data for paper/mayors.ornstein.2020.fullmatch.030225.clean.csv")%>%
mutate(YEAR = 2020)
df.l2.2022.mayor <- read.csv("./Local connection/L2/Data for paper/mayors.ornstein.2022.fullmatch.030325.clean.csv") %>%
select(-c(name.middle.match,no.match2,matched.middle,Voters_LastName_lower,Name_Last.y.y)) %>%
rename(Name_Last = Name_Last.x.x)%>%
mutate(YEAR = 2022)
df.mayors <- rbind(df.l2.2018.mayor, df.l2.2020.mayor, df.l2.2022.mayor) %>%
rename(FIPS_PLACE_CODE = place_fips) %>% # rename to do match
# just winners
filter(ELECTED==1) %>%
filter(!is.na(residency.length))
df.permits.ca.18.20.22 <- df.permit.ca2 %>%
filter(YEAR %in% c("2018","2020","2022")) %>%
unique()
# match by place to permits data
df.mayors.permits <- df.mayors %>%
left_join(df.permits.ca.18.20.22, by=c("FIPS_PLACE_CODE", "YEAR")) #%>%
feols(prop_multi_family ~ residency.length*log(POP) |
PLACE, data = df.mayors.permits, cluster = ~PLACE)
## Load packages ----
library(ggplot2)
library(tidyverse)
library(stargazer)
library(estimatr)
library(lmtest)
library(sandwich)
library(scales)
library(kableExtra)
library(ggpubr)
library(stm) # for topic modeling
library(psych)
library(broom)
library(forcats)
library(fixest)
#
## Load data ----
# public survey
df.survey <- read.csv("./Public Survey/Main Survey/survey.results.clean.040125.csv")
setwd("~/Library/CloudStorage/Dropbox/Berkeley/Classes/Dissertation")
## Load packages ----
library(ggplot2)
library(tidyverse)
library(stargazer)
library(estimatr)
library(lmtest)
library(sandwich)
library(scales)
library(kableExtra)
library(ggpubr)
library(stm) # for topic modeling
library(psych)
library(broom)
library(forcats)
library(fixest)
#
## Load data ----
# public survey
df.survey <- read.csv("./Public Survey/Main Survey/survey.results.clean.040125.csv")
# permits data
df.permits <- read.csv("./Connection and development/Data & Analysis/permits.clean.031425.csv")
df.permits.ca <- read.csv("./Connection and development/Data & Analysis/permits.ca.clean.031425.csv")
# elites data
df.final.merge <- read.csv("Elite Survey/final.merge2.csv") %>%
filter(!(First.Name == "Jennifer" & Last.Name == "Antel" & Role== "Governing Board Member"))
# Load sample data
df.final.samp <- read.csv("Elite Survey/FullSample.121223.csv")
# Merge churn data in
df.churn <- read.csv("Local connection/Data/place-level-address-change.csv") %>%
# just select variables of interest
select(ZIPCODE, CITY, STATE, TOTAL.FROM.ZIP, TOTAL.TO.ZIP) %>%
mutate(CITY = str_to_title(CITY)) %>%
mutate(CITY = str_trim(CITY, side = "both")) %>%
group_by(ZIPCODE) %>%
mutate(Total.from.zip = sum(TOTAL.FROM.ZIP),
Total.to.zip = sum(TOTAL.TO.ZIP)) %>%
ungroup() %>%
select(-c(TOTAL.FROM.ZIP, TOTAL.TO.ZIP)) %>%
unique() %>%
rename(Zip.Code = ZIPCODE,
City = CITY)
# Now, merge churn to df.finalmerge
df.final.merge2 <- df.final.merge %>%
left_join(df.churn, by = c("Zip.Code", "City")) %>%
# generate variable for net migration
mutate(net.pop.turnover = Total.to.zip - Total.from.zip)%>% # negative means more ppl left
mutate(issue_zoning = case_when(Q15_1 != "" ~ 1,
TRUE ~ 0),
issue_permits = case_when(Q15_2 != "" ~ 1,
TRUE ~ 0),
issue_affordable.housing = case_when(Q15_3 != "" ~ 1,
TRUE ~ 0),
issue_other.development = case_when(Q15_4 != "" ~ 1,
TRUE ~ 0),
issue_infrastructure = case_when(Q15_5 != "" ~ 1,
TRUE ~ 0),
issue_libraries = case_when(Q15_6 != "" ~ 1,
TRUE ~ 0),
issue_water = case_when(Q15_7 != "" ~ 1,
TRUE ~ 0),
issue_education = case_when(Q15_8 != "" ~ 1,
TRUE ~ 0),
issue_identity = case_when(Q15_9 != "" ~ 1,
TRUE ~ 0),
issue_elderly = case_when(Q15_10 != "" ~ 1,
TRUE ~ 0),
issue_homeless = case_when(Q15_11 != "" ~ 1,
TRUE ~ 0),
issue_fire = case_when(Q15_12 != "" ~ 1,
TRUE ~ 0),
issue_pub.safety = case_when(Q15_13 != "" ~ 1,
TRUE ~ 0),
issue_transportation = case_when(Q15_14 != "" ~ 1,
TRUE ~ 0),
issue_health = case_when(Q15_15 != "" ~ 1,
TRUE ~ 0),
issue_business = case_when(Q15_16 != "" ~ 1,
TRUE ~ 0),
issue_community = case_when(Q15_17 != "" ~ 1,
TRUE ~ 0),
issue_guns = case_when(Q15_18 != "" ~ 1,
TRUE ~ 0),
issue_budget = case_when(Q15_19 != "" ~ 1,
TRUE ~ 0),
issue_biking = case_when(Q15_20 != "" ~ 1,
TRUE ~ 0),
issue_parks = case_when(Q15_21 != "" ~ 1,
TRUE ~ 0),
issue_natural.disaster = case_when(Q15_22 != "" ~ 1,
TRUE ~ 0),
issue_environment = case_when(Q15_23 != "" ~ 1,
TRUE ~ 0),
issue_publicland = case_when(Q15_24 != "" ~ 1,
TRUE ~ 0))
#
## Cleaning data ----
df.survey2 <- df.survey %>%
mutate(roots_years.scale = scales::rescale(roots_years, to=c(0,1), from=c(min(roots_years), max(roots_years))),
roots_index = (roots_born.num + roots_grewup.num + roots_parents.num + roots_years.scale)/4,
rurality = scales::rescale(RUCA1, to=c(0,1), from=c(1,10)),
mayor_name_num = case_when(mayor_name == "Yes" ~ 1,
mayor_name == "Now" ~ 0,
TRUE ~ NA_real_),
pop.bucket = case_when(Population < 10000 ~ "Up to 10,000",
Population >= 10000 & Population < 20000 ~ "10,000-19,000",
Population >= 20000 & Population < 50000 ~ "20,000-49,000",
Population >= 50000 & Population < 100000 ~ "50,000-99,000",
Population >= 100000 & Population < 200000 ~ "100,000-199,000",
Population >= 200000 ~ "200,000+"),
roots_partner.num = case_when(roots_partner == "Yes" ~ 1,
roots_partner %in% c("No", "I have no partner/spouse") ~ 0,
TRUE ~ NA_real_),
roots_kids.school.num = case_when(roots_kids.school == "Yes" ~ 1,
roots_kids.school == "No" ~ 0,
roots_kids.num == 1 & roots_kids.school == "No" ~ 0,
roots_kids.num == 0 ~ 0,
TRUE ~ NA_real_),
roots_longer.num = case_when(roots_longer == "I plan to live here indefinitely" ~ 1,
roots_longer == "More than 10 years" ~ .75,
roots_longer == "6-10 years" ~ .5,
roots_longer == "1-5 years" ~ .25,
roots_longer == "Less than 1 year" ~ 0,
TRUE ~ NA_real_),
income.num = case_when(income == "Less than $25,000" ~ 0,
income == "$25,000 - $49,999" ~ 1,
income == "$50,000 - $74,999" ~ 2,
income == "$75,000 - $99,999" ~ 3,
income == "$100,000 - $149,999" ~ 4,
income == "$150,000 - $199,999" ~ 5,
income == "$200,000 or more" ~ 6,
TRUE~ NA_real_),
income.scale = scales::rescale(income.num, to=c(0,1), from=c(0,6)),
net.pop.turnover = Total.to.city-Total.from.city,# negative means more people left than arrived
gain.pop = ifelse(net.pop.turnover > 0, 1, 0), # gain or lose in population in year
move.pop = case_when(net.pop.turnover > 0 ~ "Net Increase",
net.pop.turnover < 0 ~ "Net Decresae",
net.pop.turnover == 0 ~ "Net Same",
TRUE ~ NA_character_),
log.pop = log(Population)) %>%
mutate(issue.imp_zoning = case_when(issue.importance_1 != "" ~ 1,
TRUE ~ 0),
issue.imp_permits = case_when(issue.importance_2 != "" ~ 1,
TRUE ~ 0),
issue.imp_affordable.housing = case_when(issue.importance_3 != "" ~ 1,
TRUE ~ 0),
issue.imp_other.development = case_when(issue.importance_4 != "" ~ 1,
TRUE ~ 0),
issue.imp_infrastructure = case_when(issue.importance_5 != "" ~ 1,
TRUE ~ 0),
issue.imp_libraries = case_when(issue.importance_6 != "" ~ 1,
TRUE ~ 0),
issue.imp_water = case_when(issue.importance_7 != "" ~ 1,
TRUE ~ 0),
issue.imp_education = case_when(issue.importance_8 != "" ~ 1,
TRUE ~ 0),
issue.imp_identity = case_when(issue.importance_9 != "" ~ 1,
TRUE ~ 0),
issue.imp_elderly = case_when(issue.importance_10 != "" ~ 1,
TRUE ~ 0),
issue.imp_homeless = case_when(issue.importance_11 != "" ~ 1,
TRUE ~ 0),
issue.imp_fire = case_when(issue.importance_12 != "" ~ 1,
TRUE ~ 0),
issue.imp_pub.safety = case_when(issue.importance_13 != "" ~ 1,
TRUE ~ 0),
issue.imp_transportation = case_when(issue.importance_14 != "" ~ 1,
TRUE ~ 0),
issue.imp_health = case_when(issue.importance_15 != "" ~ 1,
TRUE ~ 0),
issue.imp_business = case_when(issue.importance_16 != "" ~ 1,
TRUE ~ 0),
issue.imp_community = case_when(issue.importance_17 != "" ~ 1,
TRUE ~ 0),
issue.imp_guns = case_when(issue.importance_18 != "" ~ 1,
TRUE ~ 0),
issue.imp_budget = case_when(issue.importance_19 != "" ~ 1,
TRUE ~ 0),
issue.imp_biking = case_when(issue.importance_20 != "" ~ 1,
TRUE ~ 0),
issue.imp_parks = case_when(issue.importance_21 != "" ~ 1,
TRUE ~ 0),
issue.imp_natural.disaster = case_when(issue.importance_22 != "" ~ 1,
TRUE ~ 0),
issue.imp_environment = case_when(issue.importance_23 != "" ~ 1,
TRUE ~ 0),
issue.imp_publicland = case_when(issue.importance_24 != "" ~ 1,
TRUE ~ 0)) %>%
# strong roots same as plan to live a long time?
mutate(roots.long.time = (roots_years.scale + roots_longer.num)/2,
newcomer_5years = case_when(roots_years <= 5 ~ 1,
roots_years > 5 ~ 0,
TRUE ~ NA_real_),
newcomer_1year = case_when(roots_years <= 1 ~ 1,
roots_years > 1 ~ 0,
TRUE ~ NA_real_),
prop.life.lived = roots_years/age,
pct.life.lived = prop.life.lived*100,
#fixing something
State = case_when(CITY == "New York" ~ "NY",
TRUE ~ State)) %>%
# party with leaners for appendix
mutate(party7 = case_when(party == "Democrat" ~ "Democrat",
party == "Republican" ~ "Republican",
party == "Independent" & party.Indep == "Neither" ~ "Pure Independent",
party == "Independent" & party.Indep == "Democratic Party" ~ "Independent - D Leaner",
party == "Independent" & party.Indep == "Republican Party" ~ "Independent - R Leaner",
party == "Other" & party.Indep == "Neither" ~ "Other",
party == "Other" & party.Indep == "Democratic Party" ~ "Other - D Leaner",
party == "Other" & party.Indep == "Republican Party" ~ "Other - R Leaner",
TRUE ~ NA_character_)) %>%
# econ variables
mutate(econ.decline.1yr = case_when(med.inc.dif.2322 <0 ~ 1,
med.inc.dif.2322 >= 0 ~ 0,
TRUE ~ NA_real_),
econ.decline.5yr = case_when(med.inc.dif.2318 <0 ~ 1,
med.inc.dif.2318 >= 0 ~ 0,
TRUE ~ NA_real_),
labor.decline.1yr = case_when(pop.labor.2322 <0 ~ 1,
pop.labor.2322 >= 0 ~ 0,
TRUE ~ NA_real_),
labor.decline.5yr = case_when(pop.labor.2318 <0 ~ 1,
pop.labor.2318 >= 0 ~ 0,
TRUE ~ NA_real_),
pct.labor18 = pop.labor.force.18/pop.over16.18,
pct.labor22 = pop.labor.force.18/pop.over16.22,
pct.labor23 = pop.labor.force.18/pop.over16.23,
pct.labor.dif.1yr = pct.labor23-pct.labor22,
pct.labor.dif.5yr = pct.labor23-pct.labor18,
pct.labor.decline.1yr = case_when(pct.labor.dif.1yr <0 ~ 1,
pct.labor.dif.1yr >= 0 ~ 0,
TRUE ~ NA_real_),
pct.labor.decline.5yr = case_when(pct.labor.dif.5yr <0 ~ 1,
pct.labor.dif.5yr >= 0 ~ 0,
TRUE ~ NA_real_)) %>%
# standardizing variables
mutate(across(c(roots_years, roots_index, roots_longer.num, age, gender2, party.DR.leaner,
roots_homeowner, gain.pop, income.num, log.pop, race_white, pct.labor.decline.1yr,
pct.labor.decline.5yr, race_white, roots_born.num, roots_grewup.num,roots_partner.num,
roots_kids.num, roots_parents.num, roots_kids.school.num, pop_density),
~ as.numeric(scale(.)), .names = "{.col}.z")) %>%
mutate(roots_comm_social = case_when(roots_community == "My social connections (e.g., friends, organizations, faith community)" ~ 1,
TRUE ~ 0),
roots_comm_city = case_when(roots_community == "My city or town as a whole" ~ 1,
TRUE ~ 0),
roots_comm_neighborhood = case_when(roots_community == " My neighborhood" ~ 1,
TRUE ~ 0),
roots_comm_block = case_when(roots_community == " My immediate neighbors or block" ~ 1,
TRUE ~ 0)) #%>%
# filter(!(grepl("CDP", municipality2)))
#
