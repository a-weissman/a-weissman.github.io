geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0) +  # disables ribbon
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high)) +  # disables ribbon
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), values = c("black", "gray50")) +  # disables ribbon
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha=.5) +  # disables ribbon
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha=.25) +  # disables ribbon
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha=.25) +  # disables ribbon
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha=.05) +  # disables ribbon
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, group = group)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha=.05) +  # disables ribbon
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = .5) +
#geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha=.05) +  # disables ribbon
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group, group=group)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha=.05) +  # disables ribbon
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha=.05) +  # disables ribbon
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group),
alpha = 0.1, color = NA)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group),
alpha = 0.1, color = NA) +
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group),
alpha = 0.1, color = group) +
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group),
alpha = 0.1, color = preds$group) +
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group),
alpha = 0.1, color = "grey") +
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot without fill ribbons
ggplot(preds, aes(x = x, y = predicted, color = group)) +
geom_line(size = .5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group),
alpha = 0.1, color = NA) +
scale_color_manual(values = c("black", "gray50")) +
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
color = "Context",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
# Plot
ggplot(preds, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 0.5) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high),
alpha = 0.1, color = NA) +
scale_color_manual(values = c("black", "gray50"), name = "Context") +
scale_fill_manual(values = c("black", "gray50"), guide = "none") +  # remove fill legend
labs(
x = "Racial Identity Centrality (Standardized)",
y = "Predicted Collective Cost (Standardized)",
title = "Interaction of Audience Context and Identity Centrality"
) +
theme_minimal() +
theme(
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
axis.title = element_text(size = 9),
axis.text = element_text(size = 8),
strip.text = element_text(size = 9)
)
model_h6.1 <- lm_robust(embarrassed ~ aud_is_white_or_viral,
data = filter(df.exp.jul.bl2, transgressor_race == 1))
model_h6.2 <- lm_robust(frustrated ~ aud_is_white_or_viral,
data = filter(df.exp.jul.bl2, transgressor_race == 1))
model_h6.3 <- lm_robust(shame ~ aud_is_white_or_viral,
data = filter(df.exp.jul.bl2, transgressor_race == 1))
model_h6.4 <- lm_robust(angry ~ aud_is_white_or_viral,
data = filter(df.exp.jul.bl2, transgressor_race == 1))
# combine it all
coefs_h6 <- bind_rows(
tidy(model_h6.1, conf.int = TRUE) %>% mutate(model = "H6.1: Embarrassed"),
tidy(model_h6.2, conf.int = TRUE) %>% mutate(model = "H6.2: Frustrated"),
tidy(model_h6.3, conf.int = TRUE) %>% mutate(model = "H6.3: Shame"),
tidy(model_h6.4, conf.int = TRUE) %>% mutate(model = "H6.4: Angry")
) %>%
filter(term == "aud_is_white_or_viral") %>%
mutate(term = "White Audience or Viral")
# plot
ggplot(coefs_h6, aes(x = estimate, y = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2) +
facet_wrap(~ model, scales = "free_y") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
labs(x = "Effect on Emotion", y = NULL) +
theme_minimal() +
theme(strip.text = element_text(size = 9),
axis.text = element_text(size = 8),
axis.title.x = element_text(size = 9))
# plot
ggplot(coefs_h6, aes(x = estimate, y = term)) +
geom_point() +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2) +
facet_wrap(~ model, scales = "free_y") +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
labs(x = "Effect on Emotion", y = NULL) +
theme_minimal() +
theme(strip.text = element_text(size = 9),
axis.text = element_text(size = 8),
axis.title.x = element_text(size = 9))
# Load packages
library(psych)
# Subset the emotion items
emotion_items <- df.exp.jul.bl2 %>%
filter(transgressor_race == 1) %>%  # optional: restrict to Black transgressor conditions
select(embarrassed, frustrated, shame, angry)
# Subset the emotion items
emotion_items <- df.exp.jul.bl2 %>%
filter(transgressor_race == 1) %>%  # optional: restrict to Black transgressor conditions
select(embarrassed_num, frustrated_num, shame_num, angry_num)
# Subset the emotion items
emotion_items <- df.exp.jul.bl2 %>%
filter(transgressor_race == 1) %>%  # optional: restrict to Black transgressor conditions
dplyr::select(embarrassed_num, frustrated_num, shame_num, angry_num)
# Subset the emotion items
emotion_items <- df.exp.jul.bl2 %>%
dplyr::select(embarrassed_num, frustrated_num, shame_num, angry_num)
# Drop rows with missing data on these variables
emotion_items <- na.omit(emotion_items)
# Standardize items (optional but often recommended)
emotion_items_std <- scale(emotion_items)
# Run factor analysis (1 factor, no rotation)
emotion_fa <- fa(emotion_items_std, nfactors = 1, rotate = "none")
# Print loadings
print(emotion_fa$loadings)
# Check reliability (Cronbach’s alpha)
alpha_emotions <- psych::alpha(emotion_items)
print(alpha_emotions)
alpha_emotions
# Print loadings
print(emotion_fa$loadings)
# Run factor analysis (1 factor, no rotation)
emotion_fa <- fa(emotion_items_std, nfactors = 1, rotate = "none")
emotions_loadings <- emotion_fa$loadings
# Calculate reliability (Cronbach's alpha)
emotion_alpha <- psych::alpha(emotion_items)
# Test for measurement invariance
model <- 'factor =~ embarrassed_num + frustrated_num + shame_num + angry_num'
# Configural invariance
config <- cfa(model, data = emotion_items, group = "group")
# Configural invariance
config <- cfa(model, data = emotion_items, group = "group")
# Configural invariance
config <- cfa(model, data = emotion_items)
factor_results <- data.frame(
Loading = emotion_fa$loadings[,1],
h2 = emotion_fa$communality)
rownames(factor_results) <- c("embarrassed", "frustrated", "shame", "angry")
kbl(factor_results, booktabs = TRUE, digits = 3,
caption = "Factor Analysis of Emotions Items") %>%
kable_classic(full_width = F, html_font = "Cambria") %>%
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE) %>%
kable_styling(latex_options = "hold_position") %>%
footnote(paste0("The Cronbach's alpha is ", round(emotion_alpha$total$raw_alpha, 3)))
# Embarrassment on collective cost
model_harm_emb <- lm_robust(cc_index_z ~ emotion_index_z, data = filter(df.exp.jul.bl2, transgressor_race == 1))
# Shame on formal punishment
model_formal_shame <- lm_robust(punishment_formal_z ~ emotion_index_z, data = filter(df.exp.jul.bl2, transgressor_race == 1))
# Angry on informal punishment
model_informal_angry <- lm_robust(punishment_informal_z ~ emotion_index_z, data = filter(df.exp.jul.bl2, transgressor_race == 1))
# Embarrassment on collective cost
model_harm_emo <- lm_robust(cc_index_z ~ emotion_index_z, data = filter(df.exp.jul.bl2, transgressor_race == 1))
# Shame on formal punishment
model_formal_emo <- lm_robust(punishment_formal_z ~ emotion_index_z, data = filter(df.exp.jul.bl2, transgressor_race == 1))
# Angry on informal punishment
model_informal_emo <- lm_robust(punishment_informal_z ~ emotion_index_z, data = filter(df.exp.jul.bl2, transgressor_race == 1))
# Subset data to Black transgressor conditions
df_black_only <- filter(df.exp.jul.bl2, transgressor_race == 1)
# Mediator model: Effect of audience/virality on emotional response
model_m <- lm(emotion_index_z ~ aud_is_white_or_viral, data = df_black_only)
# Outcome model: Effect of emotion (mediator) on cost
model_y_cc <- lm(cc_index_z ~ emotion_index_z + aud_is_white_or_viral, data = df_black_only)
# Mediation analysis
med_h6_cc <- mediate(model.m = model_m,
model.y = model_y_cc,
treat = "aud_is_white_or_viral",
mediator = "emotion_index_z",
boot = TRUE,
sims = 1000)
library(mediation)
# Subset data to Black transgressor conditions
df_black_only <- filter(df.exp.jul.bl2, transgressor_race == 1)
# Mediator model: Effect of audience/virality on emotional response
model_m <- lm(emotion_index_z ~ aud_is_white_or_viral, data = df_black_only)
# Outcome model: Effect of emotion (mediator) on cost
model_y_cc <- lm(cc_index_z ~ emotion_index_z + aud_is_white_or_viral, data = df_black_only)
# Mediation analysis
med_h6_cc <- mediate(model.m = model_m,
model.y = model_y_cc,
treat = "aud_is_white_or_viral",
mediator = "emotion_index_z",
boot = TRUE,
sims = 1000)
# Mediation analysis
med_h6_cc <- mediation::mediate(model.m = model_m,
model.y = model_y_cc,
treat = "aud_is_white_or_viral",
mediator = "emotion_index_z",
boot = TRUE,
sims = 1000)
# Summary
summary(med_h6_cc)
# Subset data to Black transgressor conditions
df_black_only <- filter(df.exp.jul.bl2, transgressor_race == 1)
# Mediator model: Emotions ~ Treatment
model_m <- lm(emotion_index_z ~ aud_is_white_or_viral, data = df_black_only)
# Outcome model 1: Formal punishment ~ Treatment + Emotions
model_y_formal <- lm(punishment_formal_z ~ aud_is_white_or_viral + emotion_index_z, data = df_black_only)
# Outcome model 2: Informal punishment ~ Treatment + Emotions
model_y_informal <- lm(punishment_informal_z ~ aud_is_white_or_viral + emotion_index_z, data = df_black_only)
# Run mediation for formal punishment
med_formal <- mediate(model.m = model_m,
model.y = model_y_formal,
treat = "aud_is_white_or_viral",
mediator = "emotion_index_z",
boot = TRUE,
sims = 1000)
# Run mediation for formal punishment
med_formal <- mediattion::mediate(model.m = model_m,
model.y = model_y_formal,
treat = "aud_is_white_or_viral",
mediator = "emotion_index_z",
boot = TRUE,
sims = 1000)
# Run mediation for formal punishment
med_formal <- mediation::mediate(model.m = model_m,
model.y = model_y_formal,
treat = "aud_is_white_or_viral",
mediator = "emotion_index_z",
boot = TRUE,
sims = 1000)
# Run mediation for informal punishment
med_informal <- mediation::mediate(model.m = model_m,
model.y = model_y_informal,
treat = "aud_is_white_or_viral",
mediator = "emotion_index_z",
boot = TRUE,
sims = 1000)
# Summarize results
summary(med_formal)
summary(med_informal)
